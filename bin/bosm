#!/usr/bin/env python
#
# Copyright (C) 2012        SWOAG Technology
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import os, sys
if not 'PYTHONPATH' in os.environ: os.environ['PYTHONPATH'] = ''
else: os.environ['PYTHONPATH'] += ':'
os.environ['PYTHONPATH'] += os.path.dirname(os.path.dirname(__file__))
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

import argparse
from bomb.main import Bos
from bomb.bosm import bosm

def main():
    parser = argparse.ArgumentParser(usage = """%(prog)s [options] [target]

    %(prog)s                 : configure and build entire system
    %(prog)s clean           : clean everything
    %(prog)s info            : print system info, list of packages etc
    %(prog)s <pkg>           : (re)build package, from <pkg>-clean to
                                <pkg>-prepare, all the way to <pkg>-install
    %(prog)s <pkg>-prepare   : do <pkg>-prepare
    %(prog)s <pkg>-config    : do <pkg>-config
    %(prog)s <pkg>-compile   : do <pkg>-compile
    %(prog)s <pkg>-install   : do <pkg>-install
    %(prog)s <pkg>-clean     : do <pkg>-clean, preserve manual changes
    %(prog)s <pkg>-purge     : do <pkg>-clean, and throw away all changes
    %(prog)s <pkg>-info      : print <pkg> package info
""")

    parser.add_argument('--version', action ='version', version = Bos.version)

    parser.add_argument('-v', '--verbose', action = 'store_true',
                        help = 'verbose on console')

    parser.add_argument('-n', '--dryrun', action = 'store_true',
                        help = 'go through the motions without actual execution')

    parser.add_argument('-j', '--jobs', nargs='?', type = int,
                        help = 'the number of jobs to run simultaneously')

    parser.add_argument('-d', '--debug', action = 'store_true',
                        help = 'enable debugging log')

    parser.add_argument('-t', '--trace', action = 'store_true',
                        help = 'enable debug tracing')

    parser.add_argument('target', nargs='*', default = ['all'],
                        help = 'build target, entire system if not present')

    bosm(parser.parse_args())


if __name__ == '__main__':
    try:
        ret = main()
    except Exception:
        ret = 1
        if os.environ['_BOS_TRACE_'] == 'yes':
            import traceback
            traceback.print_exc(5)
    sys.exit(ret)
